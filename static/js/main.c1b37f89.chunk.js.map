{"version":3,"sources":["Navbar/navbar.js","Screen/screen.js","Sorting_Algorithms/heap_sort.js","App/App.js","Sorting_Algorithms/insertion_sort.js","Sorting_Algorithms/bubble_sort.js","index.js"],"names":["NavBar","props","state","sort_method","min","max","parseInt","Math","floor","window","innerWidth","bars","bar","quantity","method","target","value","sort","this","setState","generate","className","onChange","storeSortMethod","bind","defaultValue","type","handleArrayChange","onClick","handleSortMethod","React","Component","Screen","array","id","_width","bar_width","map","_heigth","style","height","width","heap_sort","sorted_array","upper_bound","length","i","max_heapify","build_max_heap","aux","index","root","rigth_children","left_children","App","max_height","bar_max_height","new_bar","number_of_bars","max_heigth","new_array","pop","getRndInteger","indexes","visualize","push","index2","insertion_sort","j","len","tmp","bubble_sort","animation_time","document","getElementsByClassName","setTimeout","backgroundColor","generateArray","handleSort","random","window_width","innerHeight","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1b37f89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\";\n\nexport default class NavBar extends React.Component {\n  // Constructor of the class\n  constructor(props) {\n    super(props);\n    // Initial state\n    this.state = {\n      sort_method: null, // The initial sort method\n      min: 10, // Minimum number of the range\n      max: parseInt(Math.floor(window.innerWidth / 8)) - 40, // Maximum number of the range input\n      bars: this.props.bar.quantity, // The number of bars on the screen\n    };\n  }\n\n  // Set the sort method\n  storeSortMethod(method) {\n    // If the method is not valid\n    if (!method.target.value) return;\n    // Otherwise, set the state as the actual sorting method\n    let sort = method.target.value;\n    this.setState({ sort_method: sort });\n  }\n  // Handle sort method\n  handleSortMethod() {\n    // Call the method on the app\n    let sort_method = this.state.sort_method;\n    this.props.sort(sort_method);\n  }\n  // Handle the change of the array\n  handleArrayChange(value) {\n    // Set the number of bars\n    this.setState({ bars: value.target.value });\n    // Call the the function on the app component to generate the new array\n    this.props.generate(value.target.value);\n  }\n\n  // Render function\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"name-option\">\n          <h1>Sorting Visualiser</h1>\n          <select onChange={this.storeSortMethod.bind(this)}>\n            <option defaultValue value=\"\">\n              Select algorithm\n            </option>\n            <option value=\"bubble\">Bubble Sort</option>\n            <option value=\"insertion\">Insertion Sort</option>\n            <option value=\"heap\">Heap Sort</option>\n            <option value=\"merge\">Merge Sort</option>\n            <option value=\"quick\">Quick Sort</option>\n          </select>\n          <label className=\"input\">\n            Array size\n            <input\n              type=\"range\"\n              min={this.state.min}\n              max={this.state.max}\n              value={this.state.bars}\n              onChange={this.handleArrayChange.bind(this)}\n            />\n          </label>\n        </div>\n        <div className=\"sort\">\n          <button onClick={this.handleSortMethod.bind(this)}>Sort</button>\n        </div>\n        <div className=\"array\">\n          <button onClick={this.props.generate}>Generate New Array</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./screen.css\";\n\nexport default class Screen extends React.Component {\n  // Constructor of th class\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: this.props.array,\n    };\n  }\n\n  // First state of the component\n  componentDidMount() {\n    this.props.generate();\n  }\n\n  // Render function\n  render() {\n    // Variables\n    let id = 0; // Id\n    let _width = this.props.bar.bar_width; // Width of every bar\n    return (\n      <div className=\"background\">\n        <div id=\"graphics\">\n          {this.state.array.map((_heigth) => {\n            return (\n              <div\n                className=\"bar\"\n                key={id++}\n                style={{ height: _heigth, width: _width }}\n              ></div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","export function heap_sort(array) {\n  let sorted_array = array;\n  let upper_bound = array.length;\n  // Convert the array into a max-heap\n  build_max_heap(array, upper_bound);\n  // Sort the actual heap\n  while (upper_bound > 0) {\n    let aux = array[0];\n    array[0] = array[--upper_bound];\n    array[upper_bound] = aux;\n\n    max_heapify(array, 0, upper_bound);\n  }\n  return sorted_array;\n}\n\n// Function to build the max heap\nfunction build_max_heap(sorted_array, upper_bound) {\n  let size = upper_bound / 2 - 1;\n  for (let i = size; i >= 0; i--) {\n    max_heapify(sorted_array, i, upper_bound);\n  }\n}\n\n// Function that will help to sort the array\nfunction max_heapify(sorted_array, index, upper_bound) {\n  // Root and childrens\n  let root = index;\n  let rigth_children = 2 * index + 1;\n  let left_children = 2 * index + 2;\n\n  if (sorted_array[root] < sorted_array[left_children] && left_children < upper_bound)\n    root = left_children;\n\n  if (sorted_array[root] < sorted_array[rigth_children] && rigth_children < upper_bound)\n    root = rigth_children;\n\n  if (index !== root) {\n    let aux = sorted_array[root];\n    sorted_array[root] = sorted_array[index];\n    sorted_array[index] = aux;\n\n    max_heapify(sorted_array, root, upper_bound);\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NavigationBar from \"../Navbar/navbar\";\nimport Screen from \"../Screen/screen\";\n\nimport { insertion_sort } from \"../Sorting_Algorithms/insertion_sort\";\nimport { heap_sort } from \"../Sorting_Algorithms/heap_sort\";\nimport { bubble_sort } from \"../Sorting_Algorithms/bubble_sort\";\n\nexport default class App extends React.Component {\n  // State of the class\n  constructor(props) {\n    super(props);\n    // State of the class\n    this.state = {\n      array: [],\n      bar: {\n        quantity: 10, // Initial amount of bars\n        max_height: bar_max_height(), // The maximun height of the bar\n        bar_width: bar_width(), // Width of every bar\n      },\n    };\n  }\n\n  // Chechk for the width and heigth every time the component is loaded\n  componentDidMount() {\n    let new_bar = this.state.bar; // Create a reference to the 'bar' object\n    new_bar.max_height = bar_max_height(); // Calculate the maximum height of the bars\n\n    // Set the new state for the bar\n    this.setState({ bar: new_bar });\n  }\n\n  // Generate the array to sort\n  generateArray(value = 0) {\n    const number_of_bars = value > 0 ? value : this.state.bar.quantity; // Number of bars in the screen\n\n    const new_bar = this.state.bar; // Create a reference to the 'bar' object\n    new_bar.quantity = number_of_bars; // Set thte new value for the number of bars in the screen\n    new_bar.bar_width = bar_width(number_of_bars); // Calculate the width that will have every bar\n\n    const max_heigth = this.state.bar.max_height; // Store the maximum height for a bar\n\n    let new_array = this.state.array; // Create a reference of the old array\n\n    // Clear the array\n    while (new_array.length > 0) new_array.pop();\n\n    // Iterate the array to fill it\n    for (let i = 0; i < number_of_bars; i++) {\n      new_array[i] = getRndInteger(20, max_heigth);\n    }\n\n    // Set the new array to the state\n    this.setState({ array: new_array, bar: new_bar });\n  }\n\n  // Handle sort button\n  handleSort(method) {\n    // Check if the parameter is empty\n    if (!method) return;\n\n    // Otherwise, call the correct sorting method\n    let sorted_array = [];\n    let indexes = [];\n    if (method === \"insertion\")\n      [sorted_array, indexes] = insertion_sort(this.state.array);\n    else if (method === \"heap\")\n      [sorted_array, indexes] = heap_sort(this.state.array);\n    else if (method === \"bubble\")\n      [sorted_array, indexes] = bubble_sort(this.state.array);\n\n    // Make the animation\n    let animation_time = 2000 / this.state.bar.quantity; // Speed of the animation\n    const bars = document.getElementsByClassName(\"bar\"); // Get the bars on the screen\n    for (let i = 0; i < sorted_array.length; i++) {\n      setTimeout(() => {\n        let visualize = this.state.array;\n        for (let j = 0; j < sorted_array[i].length; j++) {\n          visualize[j] = sorted_array[i][j];\n          // Change the color for the bars\n          if (j === indexes[i][0] || j === indexes[i][1])\n            bars[j].style.backgroundColor = \"#ee2e31\";\n          else bars[j].style.backgroundColor = \"#62a194\";\n        }\n        this.setState({ array: visualize });\n      }, animation_time * i);\n    }\n  }\n\n  // Render function\n  render() {\n    return (\n      <div>\n        <NavigationBar\n          generate={this.generateArray.bind(this)}\n          sort={this.handleSort.bind(this)}\n          bar={this.state.bar}\n        />\n        <Screen\n          generate={this.generateArray.bind(this)}\n          array={this.state.array}\n          bar={this.state.bar}\n        />\n      </div>\n    );\n  }\n}\n\n// Function to generate a random number\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n// Generate the width for every bar in the screen\nfunction bar_width(number_of_bars) {\n  const window_width = window.innerWidth / 8; // Get the size of the screen\n  return parseInt((window_width / number_of_bars) * 6); // Divide the area evenly for every bar\n}\n// Generate the maximum heigth for every bar in the screen\nfunction bar_max_height() {\n  // Calulate the height of the screen\n  const window_height = window.innerHeight;\n  // Set the maximum height to 80% of the screen\n  return window_height * 0.8;\n}\n","export function insertion_sort(array) {\n  // Copy the array\n  let sorted_array = array;\n  let visualize = [];\n  let indexes = [];\n\n  // Iterate thru the array to sort it\n  for (let i = 1; i < sorted_array.length; i++) {\n    let index = i;\n    // Find the correct position for the current number in the left-half part\n    while (index > 0 && sorted_array[index] < sorted_array[index - 1]) {\n      let aux = sorted_array[index - 1];\n      sorted_array[index - 1] = sorted_array[index];\n      sorted_array[index] = aux;\n      index--;\n      // Push the array to the visualize array\n      visualize.push([...sorted_array]); // The tree dots copy the array, not the reference\n      let index2 = index - 1 >= 0 ? index - 1 : 0;\n      indexes.push([index, index2]);\n    }\n  }\n  // Return the sorted array\n  return [visualize, indexes];\n}\n","export function bubble_sort(array) {\n  let visualize = [];\n  let indexes = [];\n  let len = array.length;\n  let i, j;\n\n  for (i = 0; i < len; i++) {\n    for (j = 0; j < len; j++) {\n      if (array[j] > array[j + 1]) {\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n      }\n      // The tree dots copy the array, not the reference\n      visualize.push([...array]);\n      indexes.push([i, j]);\n    }\n  }\n  return [visualize, indexes];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}